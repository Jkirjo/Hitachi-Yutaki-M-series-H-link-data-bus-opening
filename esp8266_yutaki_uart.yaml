uart:
  id: uart_bus
  rx_pin:
    number: GPIO3
    inverted: false
  tx_pin:
    number: GPIO1
    inverted: true
  baud_rate: 9600
  stop_bits: 1
  parity: NONE
  rx_buffer_size: 2048

globals:
  - id: packet_counter
    type: int
    restore_value: no
    initial_value: '0'

sensor:
  - platform: template
    name: "Lämmityksen pyynti"#temp set
    id: heating_setpoint
    unit_of_measurement: "°C"
    accuracy_decimals: 0
  - platform: template
    name: "Kiertovesi sisään"#water inlet
    id: water_in
    unit_of_measurement: "°C"
    accuracy_decimals: 0
  - platform: template
    name: "Kiertovesi ulos"#Water outlet
    id: water_out
    unit_of_measurement: "°C"
    accuracy_decimals: 0
  - platform: template
    name: "Ulkolämpötila"#Ambient temp
    id: outdoor_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 0
  - platform: template
    name: "Kompressorin taajuus"#Compressor frequ
    id: compressor_freq
    unit_of_measurement: "Hz"
    accuracy_decimals: 0
  - platform: template
    name: "Imupaine"#Suction pressure
    id: suction_pressure
    unit_of_measurement: "Bar"
    accuracy_decimals: 1
  - platform: template
    name: "Imulinjan lämpötila"#Suction line temp
    id: suction_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 0
  - platform: template
    name: "EEV avautuma"#Eev-opening
    id: eev_steps
    unit_of_measurement: "steps"
    accuracy_decimals: 0
  - platform: template
    name: "Nestelinjan lämpötila"#Liquid line temp
    id: liquid_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    
  - platform: template
    name: "Kuumakaasun lämpötila"#Discharge temp
    id: discharge_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 0
  - platform: template
    name: "Korkeapaine"#High side pressure
    id: discharge_pressure
    unit_of_measurement: "Bar"
    accuracy_decimals: 1
  - platform: template
    name: "joku1"# Only test for unknown byte
    id: joku1
    unit_of_measurement: "°C"
    accuracy_decimals: 0
  - platform: template
    name: "joku2"# Also test for unknown byte
    id: joku2
    unit_of_measurement: "°C"
    accuracy_decimals: 0
text_sensor:
  - platform: template
    name: "Yutaki tila"#Indicator of state, contains also error states
    id: yutaki_state

interval:
  - interval: 200ms
    then:
      lambda: |-
        const int PACKET_SIZE = 61;
        while (id(uart_bus).available() >= PACKET_SIZE) {
          uint8_t header[3];
          id(uart_bus).read_array(header, 3);
          
          if (header[0] == 0x3F && header[1] == 0x01 && header[2] == 0x09) {
            uint8_t data[PACKET_SIZE - 3];
            id(uart_bus).read_array(data, PACKET_SIZE - 3);

            // Tarkistetaan ulkolämpötila ja kompuran taajuus ennen purkua
            int outdoor = (data[36] >= 0x80) ? (int)data[36] - 256 : (int)data[36];
            int compressor = data[45];

            if ((outdoor > -40 && outdoor < 50) && (compressor <= 120)) {
              id(packet_counter) += 1;
              if (id(packet_counter) >= 3) {
                id(packet_counter) = 0;
                
                auto read_temp = [](uint8_t val) -> int {
                  if (val >= 0x80) { return (int)val - 256; } else { return val; }
                };

                id(heating_setpoint).publish_state(read_temp(data[18]));  // tavu 22

                std::string state_txt;
                switch (data[30]) { // tavu 34
                  case 0x00: state_txt = "Sammutus"; break;
                  case 0x86: state_txt = "Kompuran odotus"; break;
                  case 0x80: state_txt = "Käynnissä"; break;
                  case 0x82: state_txt = "Tavoite saavutettu"; break;
                  case 0xA2: state_txt = "Sulatus"; break;
                  case 0x20: state_txt = "menovesianturi rikki"; break;
                  case 0x3F: state_txt = "vikatila?"; break;
                  case 0xF3: state_txt = "vikatila?"; break;
                  default: {
                    char buf[10];
                    sprintf(buf, "Tila %02X", data[30]);
                    state_txt = buf;
                  }
                }
                id(yutaki_state).publish_state(state_txt);

                id(joku1).publish_state((float)data[31]);  // tavu 35 Tämä nyt testiin, mikä voisi olla.
                id(joku2).publish_state((float)data[32]);  // tavu 36 Tämäkin testiin.
                id(water_in).publish_state(read_temp(data[34]));  // tavu 38
                id(water_out).publish_state(read_temp(data[35])); // tavu 39
                id(outdoor_temp).publish_state(outdoor); // tavu 40
                id(compressor_freq).publish_state(compressor); // tavu 49
                id(suction_pressure).publish_state((float)data[48] / 10.0f); // tavu 52, Pascal arvo tarvii jakaa kympillä
                id(discharge_pressure).publish_state((float)data[49] / 5.0f); // tavu 53, tämä kivasti puolitettu dataväylään, jako vaan vitosella.
                id(discharge_temp).publish_state(read_temp(data[51])); // Tavu 55. Tää tekoälyn teos näköjään vähentää header-tavut laskusta.
                id(suction_temp).publish_state(read_temp(data[52])); // tavu 56

                uint16_t eev = (data[53] << 8) | data[54]; // tavut 57 ja 58
                id(eev_steps).publish_state(eev);

                id(liquid_temp).publish_state(read_temp(data[55])); // tavu 59
              }
            } else {
              // Jos lämpötila tai kompuran taajuus epäilyttävä, hylätään paketti
              ESP_LOGW("yutaki_uart", "Hylätty paketti: ulkolämpö %d, kompuran taajuus %d", outdoor, compressor);
            }
          } else {
            // Ei oikea alku, pudotetaan 1 tavu ja jatketaan
            uint8_t dummy;
            id(uart_bus).read_byte(&dummy);
          }
        }




captive_portal:
